{"version":3,"sources":["Form.js","Rezult.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","submit","type","onChange","change","placeholder","Rezult","weather","date","city","sunrise","sunset","temp","wind","pressure","err","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","className","ApiKey","App","state","value","handlerImputChange","e","setState","target","handlerCitySubmit","preventDefault","console","log","API","fetch","then","response","ok","Error","json","time","toLocaleString","sys","main","speed","catch","er","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"0OAeeA,EAbF,SAACC,GACZ,OACE,0BAAMC,SAAUD,EAAME,QACpB,2BACEC,KAAK,OACLC,SAAUJ,EAAMK,OAChBC,YAAY,oBAEd,qDC2BSC,EApCA,SAACP,GAAW,IAAD,EAUpBA,EAAMQ,QARRC,EAFsB,EAEtBA,KACAC,EAHsB,EAGtBA,KACAC,EAJsB,EAItBA,QACAC,EALsB,EAKtBA,OACAC,EANsB,EAMtBA,KACAC,EAPsB,EAOtBA,KACAC,EARsB,EAQtBA,SACAC,EATsB,EAStBA,IAEEC,EAAU,KACd,IAAKD,GAAON,EAAM,CAChB,IAAMQ,EAAc,IAAIC,KAAe,IAAVR,GAAgBS,qBACvCC,EAAa,IAAIF,KAAc,IAATP,GAAeQ,qBAC3CH,EACE,6BACE,8DACiC,4BAAKP,IAEtC,wDAA8BD,GAC9B,qDAA2BI,EAA3B,SACA,oEAA6BK,GAC7B,oEAA6BG,GAC7B,yDAA0BP,EAA1B,OACA,uDAAwBC,EAAxB,QAIN,OACE,yBAAKO,UAAU,UACZN,EAAG,kCAA8BN,GAASO,IC3B3CM,G,MAAS,oCAkEAC,E,4MAhEbC,MAAQ,CACNC,MAAO,GACPjB,KAAM,GACNC,KAAM,GACNC,QAAS,GACTC,OAAQ,GACRC,KAAM,GACNC,KAAM,GACNC,SAAU,GACVC,KAAK,G,EAEPW,mBAAqB,SAACC,GACpB,EAAKC,SAAS,CACZH,MAAOE,EAAEE,OAAOJ,S,EAGpBK,kBAAoB,SAACH,GACnBA,EAAEI,iBACFC,QAAQC,IAAI,iBACZ,IAAMC,EAAG,2DAAuD,EAAKV,MAAMC,MAAlE,kBAAiFH,EAAjF,iBACTa,MAAMD,GACHE,MAAK,SAACC,GACL,GAAIA,EAASC,GACX,OAAOD,EAET,MAAME,MAAM,qBAEbH,MAAK,SAACC,GAAD,OAAcA,EAASG,UAC5BJ,MAAK,SAACI,GACL,IAAMC,GAAO,IAAIvB,MAAOwB,iBACxB,EAAKd,SAAS,CACZb,KAAK,EACLP,KAAMiC,EACNhC,KAAM,EAAKe,MAAMC,MACjBf,QAAS8B,EAAKG,IAAIjC,QAClBC,OAAQ6B,EAAKG,IAAIhC,OACjBC,KAAM4B,EAAKI,KAAKhC,KAChBC,KAAM2B,EAAK3B,KAAKgC,MAChB/B,SAAU0B,EAAKI,KAAK9B,cAGvBgC,OAAM,SAACC,GACN,EAAKnB,SAAS,CACZb,KAAK,EACLN,KAAM,EAAKe,MAAMC,Y,uDAMvB,OACE,yBAAKJ,UAAU,OACb,kBAAC,EAAD,CACEI,MAAOuB,KAAKxB,MAAMC,MAClBrB,OAAQ4C,KAAKtB,mBACbzB,OAAQ+C,KAAKlB,oBAJjB,IAOE,kBAAC,EAAD,CAAQvB,QAASyC,KAAKxB,a,GA3DZyB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.7d7bf27a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <form onSubmit={props.submit}>\r\n      <input\r\n        type=\"text\"\r\n        onChange={props.change}\r\n        placeholder=\"Wpisz maiasto..\"\r\n      ></input>\r\n      <button>Wyszukaj miasto</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nconst Rezult = (props) => {\r\n  const {\r\n    date,\r\n    city,\r\n    sunrise,\r\n    sunset,\r\n    temp,\r\n    wind,\r\n    pressure,\r\n    err,\r\n  } = props.weather;\r\n  let content = null;\r\n  if (!err && city) {\r\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n    content = (\r\n      <div>\r\n        <h3>\r\n          Wyniki wyszukiwania dla miasta <em>{city}</em>\r\n        </h3>\r\n        <h4>Dane dla dnia i godziny: {date}</h4>\r\n        <h4>Aktualna temperatura: {temp}&#176;C</h4>\r\n        <h4>Wschód słońca dzisiaj o {sunriseTime}</h4>\r\n        <h4>Zachód słońca dzisiaj o {sunsetTime}</h4>\r\n        <h4>Aktualna siła wiatru {wind}m/s</h4>\r\n        <h4>Aktualne ciśnienie {pressure}hPa</h4>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"result\">\r\n      {err ? `Nie mamy w bazie miasta ${city}` : content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Rezult;\r\n","import React, { Component } from \"react\";\nimport Form from \"./Form\";\nimport Rezult from \"./Rezult\";\nimport \"./App.css\";\n//klucz do API\nconst ApiKey = \"a30dc76c8a569467302ffb89eaaea2ec\";\nclass App extends Component {\n  state = {\n    value: \"\",\n    date: \"\",\n    city: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temp: \"\",\n    wind: \"\",\n    pressure: \"\",\n    err: false,\n  };\n  handlerImputChange = (e) => {\n    this.setState({\n      value: e.target.value,\n    });\n  };\n  handlerCitySubmit = (e) => {\n    e.preventDefault();\n    console.log(\"potwierdzenie\");\n    const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${ApiKey}&units=metric`;\n    fetch(API)\n      .then((response) => {\n        if (response.ok) {\n          return response;\n        }\n        throw Error(\"Błąd\");\n      })\n      .then((response) => response.json())\n      .then((json) => {\n        const time = new Date().toLocaleString();\n        this.setState({\n          err: false,\n          date: time,\n          city: this.state.value,\n          sunrise: json.sys.sunrise,\n          sunset: json.sys.sunset,\n          temp: json.main.temp,\n          wind: json.wind.speed,\n          pressure: json.main.pressure,\n        });\n      })\n      .catch((er) => {\n        this.setState({\n          err: true,\n          city: this.state.value,\n        });\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form\n          value={this.state.value}\n          change={this.handlerImputChange}\n          submit={this.handlerCitySubmit}\n        />\n        ,\n        <Rezult weather={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}